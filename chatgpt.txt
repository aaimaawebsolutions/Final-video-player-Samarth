import React, { useRef, useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet, TouchableOpacity, ScrollView, Dimensions } from 'react-native';
import { Video } from 'expo-av';
import ModalDropdown from 'react-native-modal-dropdown';
import Icon from 'react-native-vector-icons/FontAwesome';
import * as ScreenOrientation from 'expo-screen-orientation';

const { width, height } = Dimensions.get('window');

const rateOptions = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0];

function HomeScreen() {
  const videoRef = useRef(null);
  const [status, setStatus] = useState({});
  const [selectedRate, setSelectedRate] = useState(1.0);
  const [isMuted, setIsMuted] = useState(false);
  const [showControls, setShowControls] = useState(true);
  const [isLandscape, setIsLandscape] = useState(false);
  const [duration, setDuration] = useState(0);
  const [position, setPosition] = useState(0);

  const videoUri = 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8';

  useEffect(() => {
    const updateOrientation = async () => {
      const orientation = await ScreenOrientation.getOrientationAsync();
      setIsLandscape(orientation === ScreenOrientation.Orientation.LANDSCAPE);
    };

    updateOrientation();

    const subscription = ScreenOrientation.addOrientationChangeListener(({ orientationInfo }) => {
      setIsLandscape(orientationInfo.orientation === ScreenOrientation.Orientation.LANDSCAPE);
    });

    return () => {
      subscription.remove();
    };
  }, []);

  const togglePlayPause = async () => {
    if (videoRef.current) {
      if (status.isPlaying) {
        await videoRef.current.pauseAsync();
      } else {
        await videoRef.current.playAsync();
      }
    }
  };

  const toggleMute = () => {
    if (videoRef.current) {
      videoRef.current.setIsMutedAsync(!isMuted);
      setIsMuted(!isMuted);
    }
  };

  const changeRate = (rate) => {
    setSelectedRate(rate);
    if (videoRef.current) {
      videoRef.current.setRateAsync(rate);
    }
  };

  const toggleControls = () => {
    setShowControls(!showControls);
  };

  const seekVideo = async (time) => {
    if (videoRef.current) {
      await videoRef.current.setPositionAsync(time);
      setPosition(time);
    }
  };

  const onPlaybackStatusUpdate = (newStatus) => {
    setStatus(newStatus);
    setDuration(newStatus.durationMillis);
    setPosition(newStatus.positionMillis);
  };

  const toggleOrientation = async () => {
    if (isLandscape) {
      await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT_UP);
    } else {
      await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity
        style={styles.videoContainer}
        onPress={() => toggleControls()}
      >
        <Video
          ref={videoRef}
          style={styles.video}
          source={{ uri: videoUri }}
          useNativeControls={false}
          resizeMode="contain"
          onPlaybackStatusUpdate={onPlaybackStatusUpdate}
        />
        {showControls && (
          <View style={styles.customControls}>
            <View style={styles.controlsContainer}>
              <TouchableOpacity onPress={togglePlayPause} style={styles.controlButton}>
                <Icon name={status.isPlaying ? 'pause' : 'play'} size={24} color="white" />
              </TouchableOpacity>
              <TouchableOpacity onPress={toggleMute} style={styles.controlButton}>
                <Icon name={isMuted ? 'volume-off' : 'volume-up'} size={24} color="white" />
              </TouchableOpacity>
              <View style={styles.rateDropdownContainer}>
                <Icon name="retweet" size={24} color="white" style={{ marginRight: 5 }} />
                <Text style={styles.rateDropdownLabel}>Rate:</Text>
                <ModalDropdown
                  options={rateOptions.map(rate => rate.toString())}
                  defaultValue={selectedRate.toString()}
                  onSelect={(index, value) => changeRate(parseFloat(value))}
                  style={styles.ModalDropdown}
                />
              </View>
              <View style={styles.seekBarContainer}>
                <Text style={styles.timestamp}>
                  {formatTime(position)} / {formatTime(duration)}
                </Text>
                <View style={styles.seekBar}>
                  <TouchableOpacity
                    style={styles.progressBar}
                    onPress={(e) => {
                      const { locationX, pageX } = e.nativeEvent;
                      const touchPercent = locationX / pageX;
                      const seekTime = touchPercent * duration;
                      seekVideo(seekTime);
                    }}
                  />
                </View>
              </View>
            </View>
          </View>
        )}
        <TouchableOpacity
          style={styles.orientationButton}
          onPress={toggleOrientation}
        >
          <Icon name={isLandscape ? 'expand' : 'compress'} size={24} color="white" />
        </TouchableOpacity>
      </TouchableOpacity>
    </View>
  );
}

const formatTime = (milliseconds) => {
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds - minutes * 60;
  return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    alignItems: 'center',
  },
  videoContainer: {
    width: width,
    aspectRatio: 16 / 9,
  },
  video: {
    flex: 1,
  },
  customControls: {
    position: 'absolute',
    bottom: 0,
    width: '100%',
    padding: 10,
  },
  controlsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  controlButton: {
    padding: 10,
  },
  rateDropdownContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 10,
  },
  rateDropdownLabel: {
    fontSize: 16,
    color: 'white',
  },
  seekBarContainer: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
  },
  timestamp: {
    color: 'white',
    fontSize: 14,
  },
  seekBar: {
    height: 8,
    width: '100%',
    backgroundColor: 'gray',
    borderRadius: 4,
  },
  progressBar: {
    height: '100%',
    backgroundColor: 'white',
    borderRadius: 4,
  },
  orientationButton: {
    position: 'absolute',
    top: 10,
    right: 10,
  },
});

export default HomeScreen;
